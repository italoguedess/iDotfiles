;; .__                        
;; |__| ______  _  ____  _  __
;; |  |/ __ \ \/ \/ /\ \/ \/ /
;; |  \  ___/\     /  \     / 
;; |__|\___  >\/\_/    \/\_/  
;;         \/                 

;;   Made by Italo Guedes (Github @italoguedess) as
;;   a part of italOS (Github @italoguedess/italOS).

(defwidget bar []
  (box :orientation "h"
       :class "bar_class"
    (left)
    (center)
    (right)))

(defwidget left []
  (box :orientation "h"
       :space-evenly false
       :halign "start"
       :class "left_modules"
       (menu)
       (timer :label "ó±Ž«"
	      :value timerlisten
	      :toggle toggletimervar)))

(defwidget center []
  (box :orientation "h"
       :space-evenly false
       :halign "center"
       :class "center_modules"
       (workspaces)))

(defwidget right []
  (box :orientation "h"
       :space-evenly false
       :halign "end"
       :class "right_modules"
       (sidestuff)))

(defwidget menu []
  (box (button :class "menu" :onclick "scripts/menu_launcher" "ó±„…")))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end" :spacing 20
    (volume :label "ó°•¾"
	    :value volumepoll)
    (metric :label "î‰¦"
	    :value {round(EWW_RAM.used_mem_perc, 0)})
    (metric :label "ï’¼"
	    :value {round(EWW_CPU.avg, 0)})
    (metric :label "ó°‹Š"
	    :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)})
    (time :label "ó°¥”"
	  :value timepoll)))

(defwidget workspaces []
  (literal :content workspacespoll))

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "start"
    {music != "" ? "ðŸŽµ${music}" : ""}))

(defwidget metric [label value]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (label :class "value" :text "${value}%")))

(defwidget time [label value]
  (box :class "time"
       :orientation "h"  
       :space-evenly false
    (box :class "label" label)
    (label :class "value" :text value)))

(defwidget timer [label value toggle]
  (box :class "timer"
       :orientation "h"
       :space-evenly false
    ;; toggletimervar = true means counter active
    ;; toggletimervar = "" means resetting the counter
    ;; toggletimervar = false means counter inactive (paused)
    ;; ( see ./scripts/timer )
    (button :onclick "eww -c $(pwd) update toggletimervar='true'" 
	    :onrightclick "eww -c $(pwd) update toggletimervar='false'"
	    :onmiddleclick "eww -c $(pwd) update toggletimervar=''"
	(box :class "label" label 
	  (label :class "value" :text "${value}")))))

(defwidget volume [label value]
  (eventbox :onscroll "scripts/volume {}"
	    :onclick "scripts/volume mute_toggle"
    (box :class "volume"
	 :orientation "h"
	 :space-evenly false
      (box :class "label" label)
      (label :class "value" :text "${value}"))))

(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(deflisten timerlisten :initial "25:00" "scripts/timer")

(defpoll volumepoll :interval "0.3s"
  "scripts/volume")

(defpoll timepoll :interval "10s"
  "date '+%H:%M'")

(defpoll workspacespoll :interval "1s"
  "scripts/workspaces")

(defvar toggletimervar false)

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
		      :y "1%"
		      :width "100%"
		      :height "25px"
		      :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  :stacking "fg"
  :exclusive true
  (bar))
