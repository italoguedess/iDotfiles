#+property: header-args :tangle configuration.nix :comments org

* About
#+begin_src dot 
  #  _ _   _ _      
  # (_) \ | (_)     
  #  _|  \| |___  __
  # | | . ` | \ \/ /
  # | | |\  | |>  < 
  # |_\_| \_/_/_/\_\
  #
  #  Made by Italo Guedes (Github @italoguedess) as
  #  a part of italOS (Github @italoguedess/italOS).
#+end_src
* Repository and hardware configuration
#+begin_src dot
  # Edit this configuration file to define what should be installed on
  # your system.  Help is available in the configuration.nix(5) man page
  # and in the NixOS manual (accessible by running ‘nixos-help’).

  { config, pkgs, ... }:

  {
    imports =
      [ # Include the results of the hardware scan.
	/etc/nixos/hardware-configuration.nix
      ];

#+end_src

* Bootloader, networking and timezone/locale
#+begin_src dot
  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
  # Grub for dual boot reasons
  # boot.loader.grub.enable = true;
  # boot.loader.grub.device = "nodev";
  # boot.loader.grub.useOSProber = true;
  # if you dual boot with windows this fixes the clock
  # time.hardwareClockInLocalTime = true;

  networking.hostName = "nixos"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Enable networking
  networking.networkmanager.enable = true;
  programs.nm-applet.enable = true;

  # Set your time zone.
  time.timeZone = "America/Sao_Paulo";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "pt_BR.UTF-8";
    LC_IDENTIFICATION = "pt_BR.UTF-8";
    LC_MEASUREMENT = "pt_BR.UTF-8";
    LC_MONETARY = "pt_BR.UTF-8";
    LC_NAME = "pt_BR.UTF-8";
    LC_NUMERIC = "pt_BR.UTF-8";
    LC_PAPER = "pt_BR.UTF-8";
    LC_TELEPHONE = "pt_BR.UTF-8";
    LC_TIME = "pt_BR.UTF-8";
  };

#+end_src

* Display manager, Desktop environments, WMs and WCs
#+begin_src dot
  # Enable the X11 windowing system, sddm, plasma and i3-rounded.
  services.xserver = { 
    enable = true;
    displayManager.sddm.enable = true;
    desktopManager.plasma5.enable = true;
    windowManager.i3.enable = true;
    windowManager.i3.package = pkgs.i3-rounded;
  };

  # hyprland
  programs.hyprland = { 
    enable = true;
    xwayland.enable = true;
  };

#+end_src

* Keymap
#+begin_src dot
    # Configure keymap in X11
    services.xserver = {
      layout = "br";
      xkbVariant = "";
    };

    # Configure console keymap
    console.keyMap = "br-abnt2";

#+end_src

* Printing and audio stuff
#+begin_src dot
  # Enable CUPS to print documents.
  services.printing.enable = true;

  # Enable sound with pipewire.
  # sound.enable = true; # apparently this can cause issues with pipewire
  # security.rtkit.enable = true; # optional but recommended
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
  };
#+end_src

* Touchpad
#+begin_src dot
    # Enable touchpad support (enabled default in most desktopManager).
    # services.xserver.libinput.enable = true;

#+end_src

* User account and packages
#+begin_src dot
  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.user = {
    isNormalUser = true;
    description = "user";
    extraGroups = [ "networkmanager" "wheel" ];
    packages = with pkgs; [
      vim
      polybarFull
      eww-wayland
      redshift
      (import ./emacs.nix { inherit pkgs; })
      gammastep
      git
      kitty
      brave
      rofi
      htop
      feh
      swaybg
      texlive.combined.scheme-full
    ];
  };

#+end_src

* Auto login
#+begin_src dot
    # Enable automatic login for the user.
    # services.xserver.displayManager.autoLogin.enable = true;
    # services.xserver.displayManager.autoLogin.user = "user";

#+end_src

* Unfree, flakes, system and font packages
#+begin_src dot
  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # Adding flakes
  nix.settings.experimental-features = [ "nix-command" "flakes" ];

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    picom
  ];

  # adding some fonts
  fonts.fonts = with pkgs; [
    nerdfonts
    jetbrains-mono
  ];

#+end_src

* SUID, OpenSSH daemon and firewall
#+begin_src dot
    # Some programs need SUID wrappers, can be configured further or are
    # started in user sessions.
    # programs.mtr.enable = true;
    # programs.gnupg.agent = {
    #   enable = true;
    #   enableSSHSupport = true;
    # };

    # List services that you want to enable:

    # Enable the OpenSSH daemon.
    # services.openssh.enable = true;

    # Open ports in the firewall.
    # networking.firewall.allowedTCPPorts = [ ... ];
    # networking.firewall.allowedUDPPorts = [ ... ];
    # Or disable the firewall altogether.
    # networking.firewall.enable = false;

#+end_src

* System version
#+begin_src dot
    # This value determines the NixOS release from which the default
    # settings for stateful data, like file locations and database versions
    # on your system were taken. It‘s perfectly fine and recommended to leave
    # this value at the release version of the first install of this system.
    # Before changing this value read the documentation for this option
    # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
    system.stateVersion = "23.05"; # Did you read the comment?

  }
#+end_src

* emacs.nix
#+begin_src dot :tangle emacs.nix
  { pkgs ? import <nixpkgs> {} }:

  let
    myEmacs = pkgs.emacs;
    emacsWithPackages = (pkgs.emacsPackagesFor myEmacs).emacsWithPackages;
  in
    emacsWithPackages ((with pkgs.emacsPackages; [ 
      # From main packages set
      emacs
      use-package
      bind-key
      # bling
      modus-themes
      doom-modeline
      all-the-icons
      # completion
      counsel
      ivy-rich
      which-key
      helpful
      # IDEmacs
      evil
      evil-collection
      annalist
      evil-smartparens
      projectile
      magit
      # adding modes
      julia-mode
      ob-julia-vterm
      nix-mode
      # orgmode
      org
      org-re-reveal
      org-bullets
      # lsp plugins and language servers
      lsp-mode
      company
      flycheck
      yasnippet
      yasnippet-snippets
      smartparens
    ])

    ++ (with pkgs; [
      nil
      ccls
      texlab
      pylyzer
      gdb
  ]))
#+end_src
