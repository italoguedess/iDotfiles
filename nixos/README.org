#+property: header-args :tangle configuration.nix :comments org

* About
The configuration.nix file is used to configure [[https://nixos.org/][NixOS]].

To use it in a NixOS installation do the following:
- Backup your current config: ~sudo mv /etc/nixos/configuration.nix /etc/nixos/configurationbk.nix~;
- Create a symlink to this file: ~sudo ln -s configuration.nix /etc/nixos/configuration.nix~;
- Test the changes with ~nixos-rebuild test~;
- Commit ~nixos-rebuild switch~.

* Repository and hardware configuration
#+begin_src dot
  # Edit this configuration file to define what should be installed on
  # your system.  Help is available in the configuration.nix(5) man page
  # and in the NixOS manual (accessible by running ‘nixos-help’).

  { config, pkgs, ... }:

  {
    imports =
      [ # Include the results of the hardware scan.
	/etc/nixos/hardware-configuration.nix
      ];

#+end_src

* Bootloader, networking and timezone/locale
#+begin_src dot
    # Bootloader.
    boot.loader.systemd-boot.enable = true;
    boot.loader.efi.canTouchEfiVariables = true;

    networking.hostName = "nixos"; # Define your hostname.
    # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

    # Configure network proxy if necessary
    # networking.proxy.default = "http://user:password@proxy:port/";
    # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

    # Enable networking
    networking.networkmanager.enable = true;
    programs.nm-applet.enable = true;

      # Set your time zone.
    time.timeZone = "America/Fortaleza";

    # Select internationalisation properties.
    i18n.defaultLocale = "en_US.UTF-8";

    i18n.extraLocaleSettings = {
      LC_ADDRESS = "pt_BR.UTF-8";
      LC_IDENTIFICATION = "pt_BR.UTF-8";
      LC_MEASUREMENT = "pt_BR.UTF-8";
      LC_MONETARY = "pt_BR.UTF-8";
      LC_NAME = "pt_BR.UTF-8";
      LC_NUMERIC = "pt_BR.UTF-8";
      LC_PAPER = "pt_BR.UTF-8";
      LC_TELEPHONE = "pt_BR.UTF-8";
      LC_TIME = "pt_BR.UTF-8";
    };

#+end_src

* Display manager and Desktop environments/WMs
#+begin_src dot
    # Enable the X11 windowing system.
    services.xserver.enable = true;

    # Enabling sddm as the display manager
    services.xserver.displayManager.sddm.enable = true;
    # Plasma desktop
    services.xserver.desktopManager.plasma5.enable = false;
    # i3-gaps-rounded
    services.xserver.windowManager.i3.enable = true;
    services.xserver.windowManager.i3.package = pkgs.i3-rounded;

#+end_src

* Keymap
#+begin_src dot
    # Configure keymap in X11
    services.xserver = {
      layout = "br";
      xkbVariant = "";
    };

    # Configure console keymap
    console.keyMap = "br-abnt2";

#+end_src

* Printing and audio stuff
#+begin_src dot
    # Enable CUPS to print documents.
    services.printing.enable = true;

    # Enable sound with pipewire.
    sound.enable = true;
    hardware.pulseaudio.enable = false;
    security.rtkit.enable = true;
    services.pipewire = {
      enable = true;
      alsa.enable = true;
      alsa.support32Bit = true;
      pulse.enable = true;
      # If you want to use JACK applications, uncomment this
      #jack.enable = true;

      # use the example session manager (no others are packaged yet so this is enabled by default,
      # no need to redefine it in your config for now)
      #media-session.enable = true;
    };
#+end_src

* Touchpad
#+begin_src dot
    # Enable touchpad support (enabled default in most desktopManager).
    # services.xserver.libinput.enable = true;

#+end_src

* User account and packages
#+begin_src dot
    # Define a user account. Don't forget to set a password with ‘passwd’.
    users.users.user = {
      isNormalUser = true;
      description = "user";
      extraGroups = [ "networkmanager" "wheel" ];
      packages = with pkgs; [
	vim 
	emacs
	polybarFull
	redshift
	git
	kitty
	brave
	rofi
	picom
	htop
      ];
    };

#+end_src

* Auto login
#+begin_src dot
    # Enable automatic login for the user.
    # services.xserver.displayManager.autoLogin.enable = true;
    # services.xserver.displayManager.autoLogin.user = "user";

#+end_src

* Unfree, system and font packages
#+begin_src dot
    # Allow unfree packages
    nixpkgs.config.allowUnfree = true;

    # List packages installed in system profile. To search, run:
    # $ nix search wget
    environment.systemPackages = with pkgs; [
    ];

    # adding some fonts
    fonts.fonts = with pkgs; [
      nerdfonts
      jetbrains-mono
    ];

#+end_src

* SUID, OpenSSH daemon and firewall
#+begin_src dot
    # Some programs need SUID wrappers, can be configured further or are
    # started in user sessions.
    # programs.mtr.enable = true;
    # programs.gnupg.agent = {
    #   enable = true;
    #   enableSSHSupport = true;
    # };

    # List services that you want to enable:

    # Enable the OpenSSH daemon.
    # services.openssh.enable = true;

    # Open ports in the firewall.
    # networking.firewall.allowedTCPPorts = [ ... ];
    # networking.firewall.allowedUDPPorts = [ ... ];
    # Or disable the firewall altogether.
    # networking.firewall.enable = false;

#+end_src

* System version
#+begin_src dot
    # This value determines the NixOS release from which the default
    # settings for stateful data, like file locations and database versions
    # on your system were taken. It‘s perfectly fine and recommended to leave
    # this value at the release version of the first install of this system.
    # Before changing this value read the documentation for this option
    # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
    system.stateVersion = "23.05"; # Did you read the comment?

  }
#+end_src
